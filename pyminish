#!/usr/bin/env python3

import os
import sys
import signal


def builtin_echo(args: list[str]) -> None:
    print(" ".join(args))


def builtin_exit(_: list[str]) -> None:
    exit()


def buildin_clear(_: list[str]) -> None:
    print("\033[H\033[2J\033[3J", end="")


BUILTIN_COMMAND_FUNC_MAPPING = {
    "echo": builtin_echo,
    "exit": builtin_exit,
    "clear": buildin_clear,
}


def find_command(command: str) -> str | None:
    if "/" in command:
        if os.path.exists(command) and not os.path.isdir(command):
            return command
        return None

    for path_dir in os.environ["PATH"].split(":"):
        command_path = os.path.join(path_dir, command)
        if os.path.exists(command_path) and not os.path.isdir(command_path):
            return command_path
    return None


def sigint_handler(_signum, _frame):
    pass


def set_stdio(stdin_fd=None, stdout_fd=None) -> None:
    if stdin_fd is not None:
        os.dup2(stdin_fd, sys.stdin.fileno())

    if stdout_fd is not None:
        os.dup2(stdout_fd, sys.stdout.fileno())


def run_command(tokens: list[str], stdin_fd=None, stdout_fd=None) -> None:
    command = tokens[0]
    args = tokens[1:]

    if command in BUILTIN_COMMAND_FUNC_MAPPING:
        default_stdin_dup_fd = os.dup(sys.stdin.fileno())
        default_stdout_dup_fd = os.dup(sys.stdout.fileno())
        set_stdio(stdin_fd, stdout_fd)

        func = BUILTIN_COMMAND_FUNC_MAPPING[command]
        func(args)

        set_stdio(default_stdin_dup_fd, default_stdout_dup_fd)
        os.close(default_stdin_dup_fd)
        os.close(default_stdout_dup_fd)
    else:
        command_path = find_command(command)
        if command_path is None:
            print(f"${command}: command not found", file=sys.stderr)
            return

        pid = os.fork()
        if pid == 0:
            set_stdio(stdin_fd, stdout_fd)
            command_basename = os.path.basename(command)
            os.execve(command_path, [command_basename] + args, os.environ)
        else:
            os.waitpid(pid, 0)


def interpret_line(line: str) -> None:
    if line.strip().startswith("#"):
        return

    tokens = line.split()

    if len(tokens) == 0:
        return

    redirection_count = tokens.count(">")
    pipe_count = tokens.count("|")
    if redirection_count + pipe_count >= 2:
        print("More than 1 redirections or pipes are not supported", file=sys.stderr)
        return

    if redirection_count == 1:
        redirection_index = tokens.index(">")
        command_and_args = tokens[:redirection_index]
        stdout_file_name = tokens[redirection_index + 1]

        stdout_file = open(stdout_file_name, "w")
        stdout_fd = stdout_file.fileno()

        run_command(command_and_args, stdout_fd=stdout_fd)
        os.close(stdout_fd)
    elif pipe_count == 1:
        pipe_index = tokens.index("|")
        command_and_args1 = tokens[:pipe_index]
        command_and_args2 = tokens[pipe_index + 1 :]

        pipe_r, pipe_w = os.pipe()
        run_command(command_and_args1, stdout_fd=pipe_w)
        os.close(pipe_w)
        run_command(command_and_args2, stdin_fd=pipe_r)
        os.close(pipe_r)
    else:
        run_command(tokens)


def main() -> None:
    if len(sys.argv) >= 2:
        file_name = sys.argv[1]
    else:
        file_name = None

    if file_name is None:
        signal.signal(signal.SIGINT, sigint_handler)

        while True:
            yellow_start = "\033[35m"
            end_of_color = "\033[0m"
            line = input(f"🐍 {yellow_start}pyminish{end_of_color} > ")
            interpret_line(line)
    else:
        with open(file_name) as f:
            for line in f:
                interpret_line(line)


if __name__ == "__main__":
    main()
